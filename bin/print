#!/usr/bin/env ruby

require 'json'
require 'zlib'
require 'optparse'

options = {
  points: true,
  dump: true,
  canvas: nil
}
OptionParser.new do |opts|
  opts.banner = 'Usage: example.rb [options]'

  opts.on('-p', '--[no-]points', 'Print the points array for each drawing') do |v|
    options[:points] = v
  end
  opts.on('-c', '--canvas=[cid]', 'Prints only the specific canvas index') do |c|
    options[:canvas] = c
  end
  opts.on('-d', '--[no-]dump', 'Prints the full object') do |d|
    options[:dump] = d
  end
end.parse!

puts options.inspect

file_path = ARGV[0]

raise 'Must specify a valid file path' if file_path.nil?
raise "File doesn't exist #{file_path}" unless File.exist?(file_path)

compressed = File.read(file_path)
raw_data = Zlib::Inflate.inflate(compressed)

object = JSON.parse(raw_data)

puts 'Pollock'
puts "  id:       #{object['header']['projectID']}"
puts "  version:  #{object['header']['version']}"
puts "  canvases: #{object['canvases'].count}"
puts "\n\n"

exit 0 if options[:dump] == false

if options[:canvas] != nil
  object['canvases'] = object['canvases'].select { |c| c['index'] == options[:canvas].to_i }
end

if options[:points] == false
  object['canvases'] = object['canvases'].map do |c|
    c['drawings'].each { |d| d['points'] = ["#{d['points'].count} points..."] }
  end
end

puts JSON.pretty_generate(object)
